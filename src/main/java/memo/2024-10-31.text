========================
 JPA 실무에서 어려운 이유 🤔
========================
- 객체와 테이블을 올바르게 매핑하고 설계하는 방법을 모르기 때문.

========================
         목표 🎯
========================
1. **객체와 테이블 설계 매핑**
   - 객체와 테이블을 제대로 설계하고 매핑하는 방법
   - 1:N, N:1, 1:1, N:M 매핑

2. **JPA 내부 동작 방식 이해**
   - JPA가 어떤 SQL을 만들어 내는지, 언제 실행이 되는지

========================
JPA 중심적인 개발의 문제점 ⚠️
========================
- 객체의 매핑이 복잡해 질 수 있다.

========================
      [JPA 소개] 📚
========================
- **JPA?**
  - Java Persistence API, 자바 진영의 ORM 기술 표준

- **ORM?**
  - Object-relational mapping (객체 관계 매핑)
  - 객체와 관계형 데이터베이스와 매핑
  - 대중적인 언어에는 대부분 ORM 기술이 존재

========================
      JPA 작동 방식
========================
- JPA는 애플리케이션과 JDBC 사이에서 동작
  - JAVA 애플리케이션 → JPA → JDBC API <(결과 반환)=(SQL)> DB

========================
       JPA 장점 🌟
========================
- CRUD (인서트, 조회, 수정, 삭제)를 객체로 간단하게 가능
- 유지보수: 쿼리로 짜면 복잡해지는 설계를 객체를 사용하여 한 번에 관리 가능
- 상속: JPA가 조인을 알아서 해줌.
- 연관관계: 자유로운 객체 그래프 탐색
- 성능 최적화:
  - 1차 캐시와 동일성(identity) 보장 (같은 트랜잭션 안에서만)
  - 트랜잭션을 지원하는 쓰기 지연 (여러 개의 쿼리를 한 번에 모아서 커밋)
  - 지연 로딩과 즉시 로딩:
    - 지연 로딩: 객체가 실제 사용될 때 로딩
    - 즉시 로딩: JOIN SQL로 한 번에 연관된 객체까지 미리 조회
